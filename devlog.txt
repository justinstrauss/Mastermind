Team Flying Ostrich Bouquet Development Log
Mastermind Board Game by Marc Katz and Justin Strauss

Friday 1/24/14:
We sucessfully submitted our project.

Thursday 1/23/14:
We attempted to complete the GUI using the JButton setup we worked on, but we encountered obstacles integrating it with the existing Game class driver file.

Wednesday 1/22/14:
We experimented with different board setups including two dimensional arrays of JButtons, JPanels, and Colors as a framework.

Tuesday: 1/21/14:
We researched Java GUI options and compared Swing versus AWT.

Saturday 1/18/14 to Monday 1/20/14:
We completed the Game class, thereby finishing the terminal version of gameplay for Mastermind.

Friday 1/17/14:
We began work on the Game class, which controls gameplay, making sure it adhereed to the specifications of the other classes along the way.

Thursday 1/16/14:
We finished the Rows class, which keeps track of the rows of pegs, each of which represents a turn of the game.

Wednesday 1/15/14:
We completed the PlayPegs and Indicator subclasses and built a framework for the Rows class.

Tuesday 1/14/14:
We began writing the PlayPegs and Indicator subclasses, both of which extend the Pegs superclasses.

Monday 1/13/14:
We coded the Pegs superclass, which is a basis for the PlayPegs and Indicator subclasses.

Friday 1/10/14:
We made the skeleton files with the required methods and discussed our approach to gameplay.

Thursday 1/9/14:
Our proposal was approved and we made a UML diagram, flowchart, timeline, and to do list.

Wednesday 1/8/14: 
We submitted the proposal and created this GitHub repo.

Tuesday 1/7/14:
We decided on Mastermind and completed the proposal.

Monday 1/6/14:
We brainstormed possible ideas, and the following were considered.
- Yahtzee (recreating Justin's NetLogo final project)
- Scrabble (recreating Marc's NetLogo final project)
- Mastermind (something totally new)

Obstacles Overcome (and how)

At first, we decided to have the user input the name of the color they wanted to select for each peg. This gave a lot of room for user error and it took longer than we wanted since this would have to be done 4 times per turn. To overcome this obstacle, we printed the following key at the beginning of the game:

  RED    - 0
  BLUE   - 1
  GREEN  - 2
  YELLOW - 3
  PURPLE - 4
  BLACK  - 5
  
This way, the user would simply have to input a number to make their peg color selection. We also made an array of strings of names of colors so that the input would correspond to the index of the color in the array. This change also made error handling more streamlined since the only accpeted input could be an integer between 0 and 5, so any number outside this range, any non-integer, or any string would be rejected.

Unresolved Issues

Although we were able to code a framework for the GUI, we weren't able to fully integrate it with the existing classes. The Oracle Docs ended up being our primary reference for GUI information, but at times, the various options for approaching a single issue were overwhelming. For example, just to lay out the board, we had to decided whether to use a two dimensional array of JButtons, JPanels, or Colors.

Cool Stuff Learned (conceptual and/or practical)

Despite the fact that we were'nt able to get our GUI fully up and running, our newly gained knowledge of GUI's in general will hopefully give us a head start with future GUI related projects. Also, since GitHub was our primarily code repository, we became more familiar and comfortable with using the software.

Mid-development Design Changes (and why)

At the onset of the project we planned to have an additional Board class, which would essentially be an array or ArrayList of Rows. Since, each row represents a turn, though, we wanted to avoid redundancy and opted to integrate the board aspect into the Game class driver file instead.

Lessons Learned (to apply to future projects, CS or otherwise)

When learning new concepts in class, such as ArrayLists, we took baby steps and began by coding a vanilla version Array of Steel. Then, we slowly worked our way up to an Array of Awesome. This was an effective approach to learning the ins and outs of ArrayLists. With this project, we delved right into coding a GUI for Mastermind, without first working our way up from a GUI for a simpler program. In future projects, if we want to learn and implement new concepts, we should work with simple iterations before tackling the difficulty necessary for the project itself.
